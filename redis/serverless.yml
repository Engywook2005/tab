service: tab-redis

provider:
  name: aws
  region: us-west-2
  stage: ${env:SLS_STAGE, self:custom.stageDefault}
  runtime: nodejs10.x

custom:
  stageDefault: dev

# Based on:
# https://github.com/mugglmenzel/serverless-examples-cached-rds-ws/blob/master/serverless.yml

# Service-wide it variables
environment:
  redisEndpoint:
    "Fn::Join": [":", ["Fn::GetAtt": [RedisCluster, ConfigurationEndpoint.Address], "Fn::GetAtt": [RedisCluster, ConfigurationEndpoint.Port]]]

resources:
  Resources:
    TabRedisVPC:
      Type: AWS::EC2::VPC
      Properties:
        CidrBlock: "10.0.0.0/16"
    TabRedisVPCSubnetA:
      DependsOn: TabRedisVPC
      Type: AWS::EC2::Subnet
      Properties:
        VpcId:
          Ref: TabRedisVPC
        AvailabilityZone: ${self:provider.region}a
        CidrBlock: "10.0.0.0/24"
    TabRedisVPCSubnetB:
      DependsOn: TabRedisVPC
      Type: AWS::EC2::Subnet
      Properties:
        VpcId:
          Ref: TabRedisVPC
        AvailabilityZone: ${self:provider.region}b
        CidrBlock: "10.0.1.0/24"
    TabRedisVPCSubnetC:
      DependsOn: TabRedisVPC
      Type: AWS::EC2::Subnet
      Properties:
        VpcId:
          Ref: TabRedisVPC
        AvailabilityZone: ${self:provider.region}c
        CidrBlock: "10.0.2.0/24"
    TabRedisSubnetGroup:
      Type: AWS::ElastiCache::SubnetGroup
      Properties:
        Description: "Cache Subnet Group"
        SubnetIds:
        - Ref: TabRedisVPCSubnetA
        - Ref: TabRedisVPCSubnetB
        - Ref: TabRedisVPCSubnetC
    LambdaForRedisSecurityGroup:
      DependsOn: TabRedisVPC
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupName: Tab Lambda accessing Redis
        GroupDescription: For Lambda function that accesses Tab Redis ElastiCache
        Tags:
          - Key: Name
            Value: Tab Lambda for Redis
        VpcId:
          Ref: TabRedisVPC
    RedisClusterSecurityGroup:
      DependsOn: TabRedisVPC
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupName: Tab Redis cluster
        GroupDescription: Ingress for Tab Redis ElastiCache Cluster
        SecurityGroupIngress:
          - IpProtocol: tcp
            FromPort: 6379
            ToPort: 6379
            SourceSecurityGroupId:
              "Fn::GetAtt": LambdaForRedisSecurityGroup.GroupId
        Tags:
          - Key: Name
            Value: Tab Redis cluster
        VpcId:
          Ref: TabRedisVPC
    RedisCluster:
      DependsOn: RedisClusterSecurityGroup
      Type: AWS::ElastiCache::CacheCluster
      Properties:
        AutoMinorVersionUpgrade: true
        Engine: redis
        CacheNodeType: cache.t2.small
        NumCacheNodes: 1
        VpcSecurityGroupIds:
        - "Fn::GetAtt": RedisClusterSecurityGroup.GroupId
        CacheSubnetGroupName:
          Ref: TabRedisSubnetGroup

functions:
  tabRedis:
    handler: build/handler.serverlessHandler
    timeout: 10
    vpc:
      securityGroupIds:
        - "Fn::GetAtt": LambdaForRedisSecurityGroup.GroupId
      subnetIds:
        - Ref: TabRedisVPCSubnetA
        - Ref: TabRedisVPCSubnetB
        - Ref: TabRedisVPCSubnetC
